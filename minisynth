#!/usr/bin/env python3
import sys
import pyaudio
import numpy as np
from scipy import signal

#	plays tracks

def play_track(track):
	p = pyaudio.PyAudio()
	volume = 0.5
	stream = p.open(format=pyaudio.paFloat32,
					channels=1,
					rate=44100,
					output=True)
	# play. May repeat with different volume values (if done interactively) 
	stream.write(track)
	stream.stop_stream()
	stream.close()
	p.terminate()

#	convert notes to hz

def convert_note_to_hz(char):
	file = open("notes.txt", 'r')
	hz = 0
	lines = file.readlines()
	for line in lines:
		if (char in line):
			arr = line.split()
			hz = float(arr[1])
	file.close()
	return (hz)

#	creates tracks based on wave

def create_tracks(tracks, n, duration, freqs):
	sample_rate = 44100
	if tracks[n]["tracks"] == "sine":
		note = (np.sin(2 * np.pi * np.arange(sample_rate*duration)*freqs/sample_rate))
	elif tracks[n]["tracks"] == "square":
		note = (np.sin(2 * np.pi * np.arange(sample_rate*duration)*freqs/sample_rate))
		#square wave
		note = np.clip(10*note, -1, 1)
	elif tracks[n]["tracks"] == "triangle":
		note = (np.sin(2 * np.pi * np.arange(sample_rate*duration)*freqs/sample_rate))
		#triangular wave
		note = np.cumsum(np.clip(note*10, -1, 1))
	else:
		note = signal.sawtooth(2 * np.pi * np.arange(sample_rate*duration)*freqs/sample_rate)
	return (note)

#	note generator

def generate_notes(times, freqs, total_tracks, notes):
	tracks = []
	i = 0
	j = 0
	data = []
	# not looping everything but if we wanted to we would change 1 to total_tracks
	while (j < 1):
		track = []
		i = 0
		while i < notes[j]["total"]:
			note = create_tracks(notes, j, times[j][i], freqs[j][i])
			track = np.append(track, note)
			i += 1
		tracks += [track]
		j += 1
	data = tracks[0].astype(np.float32).tobytes()
	play_track(data)

#	converts stuff to hz and calls generate_notes function

def music_create(tracks, total_tracks):
	durations_total = []
	freqs_total = []
	i = 0
	while i < total_tracks:
		freqs = []
		duration = []
		j = 0
		while j < tracks[i]["total"]:
			hz = convert_note_to_hz(tracks[i]["pitch"][j])
			freqs.append(hz)
			time = tracks[i]["duration"][j]
			duration.append(time)
			j += 1
		i += 1
		durations_total += [duration]
		freqs_total += [freqs]
	generate_notes(durations_total, freqs_total, total_tracks, tracks)

#	collect info from file.synth and stores in dictionary

def collect_info(f):
	lines = f.readlines()
	tempo_word = 'tempo'
	tracks_word = 'tracks'
	i = 0
	count = 0
	track2 = dict()
	total_tracks = 0
	for line in lines:
		if tempo_word in line:
			for word in line.split():
				if word.isdigit():
					tempo = int(word)
		if tracks_word in line:
			tracks = line.split(' ')[1]
			tracks = tracks.replace("\n", "")
			tracks = tracks.split(',')
		total_count = 0
		if line[0].isdigit():
			# dynamicaly creates dictionary to store tracks in
			track2[count] = {"nbr": 0, "tracks": "", "pitch": [], "duration": [], "total": 0}
			
			# collecting nbr of track
			track2[count].update(nbr=int(line.split(':')[0]))
			#print(track2[count]["nbr"])
			track2[count].update(tracks=tracks[track2[count]["nbr"] - 1])

			# collect pitch, alteration, octave and duration
			strstr = line.replace('\n', '')
			strstr = strstr.replace('|', '')
			string = strstr.split(' ')
			string.pop(0)
			prev = 60 / tempo
			prev_octave = '4'
			prev_tempo = 'N'
			total_tracks += 1
			for word in string:
				j = 0
				octave_found = 0
				alter_found = 0
				stage = 0
				while j < len(word):
					if j == 0:
						total_count += 1
					# collecting pitch
					s = ''
					while j < len(word) and word[j] != '/':
						if j == 0:
							s += word[j].upper()
						else:
							s += word[j]
							if word[j] != '#' and word[j] != 'b':
								prev_octave = word[j]
						j += 1
					# if len(s) == 1 or s.isdigit() == True:
					if len(s) == 1 or any(chr.isdigit() for chr in s) == False:
						s += prev_octave
					track2[count]["pitch"].append(s)
					
					# collecting duration
					if j == len(word):
						if prev_tempo == 'N':
							track2[count]["duration"].append(prev)
						else:
							track2[count]["duration"].append(float(prev_tempo) * prev)
					elif word[j] == '/':
						s = ''
						prev_tempo = ''
						j += 1
						while j < len(word):
							s += word[j]
							prev_tempo += word[j]
							j += 1
						digit = float(s) * prev
						track2[count]["duration"].append(digit)
					j += 1
			track2[count].update(total=total_count)
			print(track2)
			count += 1
		i += 1
	music_create(track2, total_tracks)

def main(argv, argc):
	if argc == 2:
		f = open(argv[1], "r")
		collect_info(f)
	else:
		print("Usage: ./minisynth /path/to/file")

if __name__ == "__main__":
	main(sys.argv, len(sys.argv))
